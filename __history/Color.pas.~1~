unit Color;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Grids, StdCtrls, ExtCtrls, XPMan;

type
  TMyColors = record
    Fundal: integer;
    PozCur: integer;
    RandSel: integer;
    Titlu: integer;
    RandImpar: integer;
    RandPar: integer;
    Contract: integer;
    Blocat: integer;
    NrFact: integer;
  end;
  TCulori = class(TForm)
    SG: TStringGrid;
    CD: TColorDialog;
    EFundal: TLabeledEdit;
    ETitlu: TLabeledEdit;
    ERandImpar: TLabeledEdit;
    ERandPar: TLabeledEdit;
    ECuContract: TLabeledEdit;
    ENRFact: TLabeledEdit;
    EBlocat: TLabeledEdit;
    EPozCurenta: TLabeledEdit;
    ERandSel: TLabeledEdit;
    Button1: TButton;
    Button2: TButton;
    procedure SGDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect;
      State: TGridDrawState);
    procedure EFundalClick(Sender: TObject);
    procedure ETitluClick(Sender: TObject);
    procedure ERandImparClick(Sender: TObject);
    procedure ERandParClick(Sender: TObject);
    procedure EPozCurentaClick(Sender: TObject);
    procedure ERandSelClick(Sender: TObject);
    procedure ECuContractClick(Sender: TObject);
    procedure EBlocatClick(Sender: TObject);
    procedure ENRFactClick(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
  public
    { Public declarations }
    function Start(): integer;
  end;

var
  Culori: TCulori;
  {Fundal: integer;
  PozCur: integer;
  RandSel: integer;
  Titlu: integer;
  RandImpar: integer;
  RandPar: integer;
  Contract: integer;
  Blocat: integer;
  NrFact: integer; }
  MyColors: TMyColors;

implementation

uses FMain;

{$R *.dfm}

procedure TCulori.Button1Click(Sender: TObject);
begin
  ModalResult := mrOk;
end;

procedure TCulori.Button2Click(Sender: TObject);
begin
  Close;
end;

procedure TCulori.EBlocatClick(Sender: TObject);
begin
  CD.Color := MyColors.Blocat;
  if CD.Execute then begin
    EBlocat.Color := CD.Color;
    MyColors.Blocat := CD.Color;
    SG.Repaint;
  end;
end;

procedure TCulori.ECuContractClick(Sender: TObject);
begin
  CD.Color := MyColors.Contract;
  if CD.Execute then begin
    ECuContract.Color := CD.Color;
    MyColors.Contract := CD.Color;
    SG.Repaint;
  end;
end;

procedure TCulori.EFundalClick(Sender: TObject);
begin
  CD.Color := MyColors.Fundal;
  if CD.Execute then begin
    Culori.Color := CD.Color;
    EFundal.Color := CD.Color;
    MyColors.Fundal := EFundal.Color;
  end;
end;

procedure TCulori.ENRFactClick(Sender: TObject);
begin
  CD.Color := MyColors.NrFact;
  if CD.Execute then begin
    ENRFact.Color := CD.Color;
    MyColors.NrFact := CD.Color;
    SG.Repaint;
  end;
end;

procedure TCulori.EPozCurentaClick(Sender: TObject);
begin
  CD.Color := MyColors.PozCur;
  if CD.Execute then begin
    EPozCurenta.Color := CD.Color;
    MyColors.PozCur := CD.Color;
    SG.Repaint;
  end;
end;

procedure TCulori.ERandImparClick(Sender: TObject);
begin
  CD.Color := MyColors.RandImpar;
  if CD.Execute then begin
    ERandImpar.Color := CD.Color;
    MyColors.RandImpar := CD.Color;
    SG.Repaint;
  end;
end;

procedure TCulori.ERandParClick(Sender: TObject);
begin
  CD.Color := MyColors.RandPar;
  if CD.Execute then begin
    ERandPar.Color := CD.Color;
    MyColors.RandPar := CD.Color;
    SG.Repaint;
  end;
end;

procedure TCulori.ERandSelClick(Sender: TObject);
begin
  CD.Color := MyColors.RandSel;
  if CD.Execute then begin
    ERandSel.Color := CD.Color;
    MyColors.RandSel := CD.Color;
    SG.Repaint;
  end;
end;

procedure TCulori.ETitluClick(Sender: TObject);
begin
  CD.Color := MyColors.Titlu;
  if CD.Execute then begin
    SG.FixedColor := CD.Color;
    ETitlu.Color := CD.Color;
    MyColors.Titlu := ETitlu.Color;
    SG.Repaint;
  end;
end;

procedure TCulori.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  with MainForm do begin
    DBGest.FixedColor := MyColors.Titlu;
    DBManager.FixedColor := MyColors.Titlu;
    MainForm.Color := MyColors.Fundal;
    PozCur := MyColors.PozCur;
    RandSel := MyColors.RandSel;
    RandImpar := MyColors.RandImpar;
    RandPar := MyColors.RandPar;
    iContract := MyColors.Contract;
    Blocat := MyColors.Blocat;
    NrFact := MyColors.NrFact;
  end;
end;

procedure TCulori.FormShow(Sender: TObject);
begin
  with MainForm do begin
    MyColors.Fundal := MainForm.Color;
    MyColors.Titlu := MainForm.DBGest.FixedColor;
    MyColors.PozCur := PozCur;
    MyColors.RandSel := RandSel;
    MyColors.RandImpar := RandImpar;
    MyColors.RandPar := RandPar;
    MyColors.Contract := iContract;
    MyColors.Blocat := Blocat;
    MyColors.NrFact := NrFact;
  end;

  Culori.Color := MyColors.Fundal;
  EFundal.Color := MyColors.Fundal;
  EPozCurenta.Color := MyColors.PozCur;
  ERandSel.Color := MyColors.RandSel;
  ETitlu.Color := MyColors.Titlu;
  ERandImpar.Color := MyColors.RandImpar;
  ERandPar.Color := MyColors.RandPar;
  ECuContract.Color := MyColors.Contract;
  EBlocat.Color := MyColors.Blocat;
  ENRFact.Color := MyColors.NrFact;
end;

procedure TCulori.SGDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect;
  State: TGridDrawState);
begin
  if ARow = 0 then begin
    SG.Canvas.Brush.Color := MyColors.Titlu;
    (Sender as TStringGrid).Canvas.FillRect(Rect);
    Exit;
  end;
  if ((ARow mod 2) = 1) and (ARow <> 0) then SG.Canvas.Brush.Color := MyColors.RandImpar
  else SG.Canvas.Brush.Color := MyColors.RandPar;
  if gdSelected in State then SG.Canvas.Brush.Color := MyColors.PozCur;
  if ARow = 3 then SG.Canvas.Brush.Color := MyColors.RandSel;
  if (ACol = 2) and (ARow = 2) then SG.Canvas.Brush.Color := MyColors.Contract;
  if (ACol = 3) and (ARow = 2) then SG.Canvas.Brush.Color := MyColors.Blocat;
  if (ACol = 4) and (ARow = 2) then SG.Canvas.Brush.Color := MyColors.NrFact;
  if (ACol = 4) and (ARow = 3) then SG.Canvas.Brush.Color := MyColors.NrFact;
  (Sender as TStringGrid).Canvas.FillRect(Rect);

end;

function TCulori.Start(): integer;
begin
  Culori := TCulori.Create(Application);
  Culori.ShowModal;
  Culori.Free;
end;

end.
