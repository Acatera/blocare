unit Sesiz_Detail;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, ComCtrls, Grids, DB, DBTables, DBGrids, AlexUtils;

type
  TSesizDetail = class(TForm)
    EID: TLabeledEdit;
    EClient: TLabeledEdit;
    DApel: TDateTimePicker;
    DProgramat: TDateTimePicker;
    Label1: TLabel;
    Label2: TLabel;
    Btn_Detalii: TButton;
    Label3: TLabel;
    Problema: TMemo;
    Label4: TLabel;
    CPentru: TComboBox;
    CPublic: TCheckBox;
    Label5: TLabel;
    Label7: TLabel;
    DBRezolvari: TDBGrid;
    Btn_Renunta: TButton;
    Btn_Salveaza: TButton;
    Query: TQuery;
    DS: TDataSource;
    PBottom: TPanel;
    SRez: TShape;
    procedure FormShow(Sender: TObject);
    procedure Btn_RenuntaClick(Sender: TObject);
    procedure Btn_SalveazaClick(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure Btn_DetaliiClick(Sender: TObject);
    procedure DBRezolvariDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure EIDKeyPress(Sender: TObject; var Key: Char);
    procedure EClientKeyPress(Sender: TObject; var Key: Char);
    procedure DApelKeyPress(Sender: TObject; var Key: Char);
    procedure CPentruKeyPress(Sender: TObject; var Key: Char);
    procedure EClientEnter(Sender: TObject);
    procedure DApelEnter(Sender: TObject);
    procedure DProgramatExit(Sender: TObject);
    procedure CPublicKeyPress(Sender: TObject; var Key: Char);
    procedure CPentruEnter(Sender: TObject);
    procedure FormKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure DBRezolvariDblClick(Sender: TObject);
    procedure DBRezolvariKeyPress(Sender: TObject; var Key: Char);
  private
    { Private declarations }
  public
    { Public declarations }
    function Start(ID, Stare: string): integer;
  end;

var
  SesizDetail: TSesizDetail;
  sID: string;
  State: string;
  sCodFC: string;
  Rezolvat: string;

implementation

uses Fur_Detail, FRezolvare, FMain;

{$R *.dfm}

procedure TSesizDetail.Btn_DetaliiClick(Sender: TObject);
var
  QAux: TQuery;
  SQL: string;
  I: integer;
begin
  QAux := TQuery.Create(SesizDetail);
  QAux.DatabaseName := MainForm.DB.DatabaseName;
  SQL := 'SELECT CODFUR, DENFUR, SECTIA AS STARE, COUNT(CODFUR) AS NRFACT, SUM(SUMADB-SUMACR) AS SUMA, FIRMA, CONTRACT ' +
         'FROM (SELECT * FROM (';
  for I := 0 to MainForm.CGest.Items.Count - 1 do
    SQL := SQL +
      'SELECT CODFUR, DENFUR, SECTIA, SUMADB, SUMACR, "' + MainForm.CGest.Items[I] + '" AS FIRMA, CONCAT(CONT_DM, CONT_USD) AS CONTRACT ' +
      'FROM `' + MainForm.CGest.Items[I] + '`.`FUR` INNER JOIN `' + MainForm.CGest.Items[I] + '`.`FRES' + SDate + '` ON CODFUR = CODFC ' +
      'WHERE (CONTFC="4111") AND ((SUMADB-SUMACR) <> 0) AND (COD_FISCAL = "' + sCodFC + '") UNION ALL ';
  SQL := Copy(SQL, 1, Length(SQL) - 11) + ') AS TEMP ORDER BY CONTRACT DESC) AS TEMP2 GROUP BY CODFUR';
  QAux.SQL.Text := SQL;
  QAux.Open;
  if QAux.RecordCount = 0 then begin
  SQL := 'SELECT CODFUR, DENFUR, SECTIA AS STARE, FIRMA, CONTRACT ' +
         'FROM (SELECT * FROM(';
  for I := 0 to MainForm.CGest.Items.Count - 1 do
    SQL := SQL +
      'SELECT CODFUR, DENFUR, SECTIA, "' + MainForm.CGest.Items[I] + '" AS FIRMA, CONCAT(CONT_DM, CONT_USD) AS CONTRACT ' +
      'FROM `' + MainForm.CGest.Items[I] + '`.`FUR` ' +
      'WHERE (COD_FISCAL = "' + sCodFC + '") UNION ALL ';
    SQL := Copy(SQL, 1, Length(SQL) - 11) + ') AS TEMP ORDER BY CONTRACT DESC) AS TEMP2 GROUP BY CODFUR';
    QAux.SQL.Text := SQL;
    QAux.Open;
    FurDetail.Start(SDate, QAux.Fields[0].AsString, QAux.Fields[1].AsString, QAux.Fields[2].AsString, '0', '0', QAux.Fields[3].AsString);
  end else
    FurDetail.Start(SDate, QAux.Fields[0].AsString, QAux.Fields[1].AsString, QAux.Fields[2].AsString, QAux.Fields[3].AsString, QAux.Fields[4].AsString, QAux.Fields[5].AsString);
  QAux.Free;
end;

procedure TSesizDetail.Btn_RenuntaClick(Sender: TObject);
begin
  Close;
end;

procedure TSesizDetail.Btn_SalveazaClick(Sender: TObject);
var
  sPublic: string;
begin
  sPublic := 'NU';
  if CPublic.Checked then sPublic := 'DA';
  if State = 'M' then begin //Modifica
    Query.SQL.Text :=
      'UPDATE FDSOFT.AGENDA_MNG SET ' +
        'DATA_POST = "' + MySQLDateToStr(DApel.Date, 'YYYY-MM-DD') + '", ' +
        'DATA_VALAB = "' + MySQLDateToStr(DProgramat.Date, 'YYYY-MM-DD') + '", ' +
        'DENFUR = "' + EClient.Text + '", ' +
        'TEXT = "' + StringReplace(StringReplace(TStringsToString(Problema.Lines, '||C10||'), '"', '<ghilimele>', [rfReplaceAll]), '*', '<steluta>', [rfReplaceAll]) + '", ' +
        'UTILIZATOR = "' + CPentru.Text + '", ' +
        'UTILIZATOR_POST = "' + UpperCase(Copy(UMail, 1, Pos('@', UMail) - 1)) + '", ' +
        'CODFUR = "' + sCodFC + '", ' +
        'PUBLIC = "' + sPublic + '", ' +
        'BIFAT_OK = "' + Rezolvat + '" ' +
      'WHERE ROW_ID = ' + EID.Text;
    Query.ExecSQL;
  end else begin //Adauga
    if sCodFC = '' then sCodFC := 'NOU';
    Query.SQL.Text :=
      'INSERT INTO FDSOFT.AGENDA_MNG (DATA_POST, DATA_VALAB, ORA_VALAB, DENFUR, TEXT, UTILIZATOR, UTILIZATOR_POST, CODFUR, PUBLIC, BIFAT_OK) VALUES (' +
        '"' + MySQLDateToStr(DApel.Date, 'YYYY-MM-DD') + '", ' +
        '"' + MySQLDateToStr(DProgramat.Date, 'YYYY-MM-DD') + '", ' +
        '"16:30:00", ' +
        '"' + EClient.Text + '", ' +
        '"' + StringReplace(StringReplace(TStringsToString(Problema.Lines, '||C10||'), '"', '<ghilimele>', [rfReplaceAll]), '*', '<steluta>', [rfReplaceAll]) + '", ' +
        '"' + CPentru.Text + '", ' +
        '"' + UpperCase(Copy(UMail, 1, Pos('@', UMail) - 1)) + '", ' +
        '"' + sCodFC + '", ' +
        '"' + sPublic + '", ' +
        '"NU")';  //REZOLVAT
//      'WHERE ROW_ID = ' + EID.Text;
    Query.ExecSQL;
  end;
  Close;
end;

procedure TSesizDetail.CPentruEnter(Sender: TObject);
begin
  CPentru.DroppedDown := True;
end;

procedure TSesizDetail.CPentruKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then SelectNext(TComboBox(Sender), True, True)
end;

procedure TSesizDetail.CPublicKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then SelectNext(TCheckBox(Sender), True, True)
end;

procedure TSesizDetail.DApelEnter(Sender: TObject);
begin
  (Sender as TDateTimePicker).Color := clSkyBlue;
end;

procedure TSesizDetail.DApelKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then SelectNext(TDateTimePicker(Sender), True, True)
end;

procedure TSesizDetail.DBRezolvariDblClick(Sender: TObject);
begin
  if Rezolvare.Start(Query.FieldByName('ROW_ID').AsString, EID.Text) = 1 then begin
    Rezolvat := 'DA';
    Btn_SalveazaClick(Self);
  end;
  Query.SQL.Text := 'SELECT TEXT_REZOLVAT, UPPER(BIFAT_DE) AS BIFAT_DE, BIFAT_OK, ROW_ID FROM FDSOFT.AGENDA_MNG WHERE ROW_ID = ' + EID.Text;
  Query.Open;
end;

procedure TSesizDetail.DBRezolvariDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
var
  ARect: TRect;
  S: string;
begin
  ARect := Rect;
  if Rect.Top = 0 then Exit;
  //S := StringReplace(Column.Field.Text, ',', #13, [rfReplaceAll]);
  S := Column.Field.AsString;
  S := StringReplace(S, '<ghilimele>', '"', [rfReplaceAll]);
  S := StringReplace(S, '<steluta>', '*', [rfReplaceAll]);
  S := StringReplace(S, '||C10||', ';', [rfReplaceAll]);
  if gdSelected in State then begin
    (Sender as TDBGrid).Canvas.Brush.Color := PozCur;
    (Sender as TDBGrid).Canvas.Font.Color := clWhite;
  end;
  (Sender as TDBGrid).Canvas.FillRect(Rect);
  ARect.Left := Rect.Left + 2;
  if (Column.Index < 2) and (Column.Index < 3) then
    DrawText((Sender as TDBGrid).Canvas.Handle, PChar(S), Length(S), ARect, 1);
  if (Column.Index > 1) then
    DrawText((Sender as TDBGrid).Canvas.Handle, PChar(S), Length(S), ARect, 0);
end;

procedure TSesizDetail.DBRezolvariKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then DBRezolvariDblClick(Self);
end;

procedure TSesizDetail.DProgramatExit(Sender: TObject);
begin
  (Sender as TDateTimePicker).Color := clWhite;
end;

procedure TSesizDetail.EClientEnter(Sender: TObject);
begin
  (Sender as TLabeledEdit).Color := clSkyBlue;
end;

procedure TSesizDetail.EClientKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then SelectNext(TEdit(Sender), True, True)
  else
    Key := UpCase(Key)
end;

procedure TSesizDetail.EIDKeyPress(Sender: TObject; var Key: Char);
begin
  Key := #0;
end;

procedure TSesizDetail.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #27 then Close;
end;

procedure TSesizDetail.FormKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  Temp: string;  
begin
  if State = 'M' then begin
    if (Key = VK_F4) and (not (ssAlt in Shift)) then begin
      if Rezolvare.Start('#', EID.Text) = 1 then begin
        Rezolvat := 'DA';
        Btn_SalveazaClick(Self);
      end;
      Query.SQL.Text := 'SELECT TEXT_REZOLVAT, UPPER(BIFAT_DE) AS BIFAT_DE, BIFAT_OK, ROW_ID FROM FDSOFT.AGENDA_MNG WHERE ROW_ID = ' + EID.Text;
      Query.Open;
      if Query.RecordCount <> 0 then begin
        DBRezolvari.Visible := True;
        Label7.Visible := True;
        PBottom.Top := 446;
        Btn_Salveaza.Top := 468;
        Btn_Renunta.Top := 468;
        SesizDetail.ClientHeight := 496;
      end;
    end;
    if (Key = VK_F6) and (DBRezolvari.Visible) then DBRezolvariDblClick(Self);
    Temp := Query.FieldByName('ROW_ID').AsString;
    if Key = VK_DELETE then begin
      if MessageDlg('Esti sigur ca vrei asta?', mtWarning, mbYesNo, 0) = mrYes then begin
        Query.SQL.Text :=
          'UPDATE FDSOFT.AGENDA_MNG SET ' +
            'TEXT_REZOLVAT = "", ' +
            'BIFAT_DE = "", ' +
            'BIFAT_OK = "NU" ' +
          'WHERE ROW_ID = ' + Temp;
        Query.ExecSQL;
      end;
      Query.SQL.Text := 'SELECT TEXT_REZOLVAT, UPPER(BIFAT_DE) AS BIFAT_DE, BIFAT_OK, ROW_ID FROM FDSOFT.AGENDA_MNG WHERE ROW_ID = ' + EID.Text;
      Query.Open;
      if Query.RecordCount = 0 then begin
        DBRezolvari.Visible := False;
        Label7.Visible := False;
        //PBottom.Visible := False;
        PBottom.Top := 319 + 25 + 3;
        Btn_Salveaza.Top := 319;
        Btn_Renunta.Top := 319;
        SesizDetail.ClientHeight := 319 + 25 + 3 + 18;
      end;
    end;
  end;
end;

procedure TSesizDetail.FormShow(Sender: TObject);
begin
  Rezolvat := 'NU';
  Color := MainForm.Color;
  CPentru.Items.CommaText := ListaAngajati;
  CPentru.Items.Add('TOTI');
  if State = 'M' then begin
    Caption := 'Modificare sesizare';
    Query.SQL.Text :=
      'SELECT ROW_ID, DATA_POST, DATA_VALAB, ORA_VALAB, TEXT, UPPER(UTILIZATOR), UPPER(UTILIZATOR_POST), ' +
        'PUBLIC, CODFUR, UPPER(DENFUR), TEXT_REZOLVAT, UPPER(BIFAT_DE), BIFAT_OK ' +
      'FROM FDSOFT.AGENDA_MNG WHERE ROW_ID = ' + sID;
    Query.Open;
    EID.Text := Query.FieldByName('ROW_ID').AsString;
    EClient.Text := Query.FieldByName('UPPER(DENFUR)').AsString;
    //EPersoana.Text := Query.FieldByName('PERSOANA').AsString;
    //ETelefon.Text := Query.FieldByName('TELEFON').AsString;
    DApel.Date := Query.FieldByName('DATA_POST').AsDateTime;
    DProgramat.Date := Query.FieldByName('DATA_VALAB').AsDateTime;
    Problema.Lines.Text := StringReplace(StringReplace(StringReplace(Query.FieldByName('TEXT').AsString, '||C10||', #13#10, [rfReplaceAll]), '<ghilimele>', '"', [rfReplaceAll]), '<steluta>', '*', [rfReplaceAll]);
    CPentru.ItemIndex := CPentru.Items.IndexOf(Query.FieldByName('UPPER(UTILIZATOR)').AsString);
    if Query.FieldByName('BIFAT_OK').AsString = 'DA' then begin
      SRez.Brush.Color := clGreen;
      SRez.Hint := 'Sesizare rezolvata';
    end;
    sCodFC := Query.FieldByName('CODFUR').AsString;
    if (sCodFC = '') or (sCodFC = 'NOU') then Btn_Detalii.Visible := False;
    CPublic.Checked := Query.FieldByName('PUBLIC').AsString = 'DA';
    Query.SQL.Text := 'SELECT TEXT_REZOLVAT, UPPER(BIFAT_DE) AS BIFAT_DE, BIFAT_OK, ROW_ID FROM FDSOFT.AGENDA_MNG WHERE ROW_ID = ' + EID.Text;
    Query.Open;
    if Query.FieldByName('BIFAT_OK').AsString = 'NU' then begin
      DBRezolvari.Visible := False;
      Label7.Visible := False;
      PBottom.Top := 319 + 25 + 3;
      Btn_Salveaza.Top := 319;
      Btn_Renunta.Top := 319;
      SesizDetail.ClientHeight := 319 + 25 + 3 + 18;
    end;
  end;
  if State = 'A' then begin
    Caption := 'Adaugare sesizare';
    EID.Visible := False;
    EClient.Left := 2;
    EClient.Width := 569;
    DApel.Date := Now;
    DProgramat.Date := Now + 1;
    CPentru.ItemIndex := CPentru.Items.Count - 1;
    Label5.Visible := False;
    SRez.Visible := False;
    Btn_Salveaza.Caption := 'Adauga';
    DBRezolvari.Visible := False;
    Label7.Visible := False;
    PBottom.Visible := False;
    Btn_Salveaza.Top := 319;
    Btn_Renunta.Top := 319;
    SesizDetail.ClientHeight := 319 + 25 + 3;
  end;

end;

function TSesizDetail.Start(ID, Stare: string): integer;
begin
  SesizDetail := TSesizDetail.Create(Application);
  sID := ID;
  State := Stare;
end;

end.
