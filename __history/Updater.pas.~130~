unit Updater;

interface

uses
  Classes, Windows, SysUtils, ShellAPI, Forms, AlexUtils, Dialog, Add_Modify,
  StdCtrls;

const
  UPDATE_PATH = '\\alex\shared\Blocare\Blocare.exe';

type
  TUpdateThread = class(TThread)
  private                                 
    PActionType: string;
    PMyName: string;
    PMyPath: string;
    procedure SetName;
    procedure DoUpdate;
  protected
    procedure Execute; override;
    function GrabFile(AFileName: string): boolean;
  public
    constructor Create(ExePath, ActionType: string);
  end;

implementation

uses FMain, Update;

{$IFDEF MSWINDOWS}
type
  TThreadNameInfo = record
    FType: LongWord;     // must be 0x1000
    FName: PChar;        // pointer to name (in user address space)
    FThreadID: LongWord; // thread ID (-1 indicates caller thread)
    FFlags: LongWord;    // reserved for future use, must be zero
  end;
{$ENDIF}

{ TUpdateThread }

constructor TUpdateThread.Create(ExePath, ActionType: string);
begin
  Inherited Create(False);
  PMyName := ExtractFileName(ExePath);
  PMyPath := ExtractFilePath(ExePath);
  PActionType := ActionType;
  SetName;
end;

procedure TUpdateThread.SetName;
{$IFDEF MSWINDOWS}
var
  ThreadNameInfo: TThreadNameInfo;
{$ENDIF}
begin
{$IFDEF MSWINDOWS}
  ThreadNameInfo.FType := $1000;
  ThreadNameInfo.FName := 'Update';
  ThreadNameInfo.FThreadID := $FFFFFFFF;
  ThreadNameInfo.FFlags := 0;

  try
    RaiseException( $406D1388, 0, sizeof(ThreadNameInfo) div sizeof(LongWord), @ThreadNameInfo );
  except
  end;
{$ENDIF}
end;

function TUpdateThread.GrabFile(AFileName: string): boolean;
begin
  DeleteFile(PChar(PMyPath + PMyName + '_'));
  MoveFile(PChar(PMyPath + PMyName), PChar(PMyPath + PMyName + '_'));
  Result := CopyFile(PChar(AFileName), PChar(PMyPath + PMyName), False);
end;

procedure TUpdateThread.DoUpdate;
var
  MyVer: integer;
  UpdateOK: boolean;
  AForm: TForm;
  ALabel: TLabel;
  AWidth: integer;
begin
  UpdateOK := false;
  if not FileExists(UPDATE_PATH) then begin
    AForm := PopMsg('Fisierul de actualizare nu exista. Actualizare nereusita.');
    AForm.Show;
    Sleep(2000);
    AForm.Free;
    Exit;
  end;
  MyVer := s2i(GetVersion(PMyName,''));
  if (MyVer < s2i(GetVersion(UPDATE_PATH,''))) or (MainForm.Options.Values['FORCE_UPDATE'] = '1') then begin
    if FDialog.Start('Actualizare', 'Alex a mai lucrat ceva la Blocare.'#13 +
                                    'Actualizezi?'#13 +
                                    #13 +
                                    'Versiune curenta:' + GetVersion(PMyName) + #13 +
                                    'Versiune actualizare:' + GetVersion(UPDATE_PATH), fdBtn_Yes or fdBtn_No, mtConfirmation) = fdBtn_Yes then begin
      AForm := PopMsg('Actualizare in curs. Te rog sa astepti...');
      AForm.Show;
      Application.ProcessMessages;
      UpdateOK := GrabFile(UPDATE_PATH);
      ALabel.Free;
      AForm.Free;
      if not UpdateOk then MainFOrm.Caption := 'Copy failed';
    end;
  end else
    if PActionType = 'M' then
      FDialog.Start('Actualizare', 'Nu exista o versiune mai noua.'#13'Poate e timpul sa-l stresezi pe Alex sa mai lucreze?', fdOk, mtInformation);
  if UpdateOK then begin
    MainForm.DoRestart := True;
    Application.Terminate;
  end;
end;

procedure TUpdateThread.Execute;
begin
  SetName;
  if FileExists(UPDATE_PATH) then Synchronize(DoUpdate);
end;

end.
